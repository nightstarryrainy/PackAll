// Generated by Haxe 4.2.1+bf9ff69
(function ($global) { "use strict";
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var v = process.platform + " " + process.arch;
	process.stdout.write(Std.string(v));
	process.stdout.write("\n");
	var v = "node " + process.version;
	process.stdout.write(Std.string(v));
	process.stdout.write("\n");
	var v = "electron " + process.versions["electron"];
	process.stdout.write(Std.string(v));
	process.stdout.write("\n");
	electron_main_App.whenReady().then(function(_) {
		var win = new electron_main_BrowserWindow({ width : 720, height : 480, webPreferences : { nodeIntegration : true, contextIsolation : false}});
		win.on("closed",function() {
			win = null;
		});
		win.loadFile("app.html");
		var menu = electron_main_Menu.getApplicationMenu();
		menu.append(new electron_main_MenuItem({ label : "Haxe", submenu : [{ label : "Website", click : function(e) {
			return win.loadURL("https://haxe.org");
		}},{ label : "Github", click : function(e) {
			return win.loadURL("https://github.com/HaxeFoundation");
		}}]}));
		menu.append(new electron_main_MenuItem({ label : "Extra", submenu : [{ label : "Dev Console", click : function(e) {
			if(win.webContents.isDevToolsOpened()) {
				win.webContents.closeDevTools();
			} else {
				win.webContents.openDevTools();
			}
		}}]}));
		var _g = 0;
		var _g1 = menu.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(item.label == "File") {
				var fileMenuItem = item;
				fileMenuItem.submenu.insert(0,new electron_main_MenuItem({ label : "Open", click : function(m,b,e) {
					var path = electron_main_Dialog.showOpenDialogSync(null,{ defaultPath : Main.openDefaultPath, properties : ["openFile","openDirectory"]});
					var tmp = path != null;
				}}));
				break;
			}
		}
		electron_main_Menu.setApplicationMenu(menu);
	});
	electron_main_App.on("window-all-closed",function(e) {
		if(process.platform != "darwin") {
			electron_main_App.quit();
		}
	});
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var electron_main_App = require("electron").app;
var electron_main_BrowserWindow = require("electron").BrowserWindow;
var electron_main_Dialog = require("electron").dialog;
var electron_main_Menu = require("electron").Menu;
var electron_main_MenuItem = require("electron").MenuItem;
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
Main.openDefaultPath = "C://";
Main.main();
})({});

//# sourceMappingURL=main.js.map